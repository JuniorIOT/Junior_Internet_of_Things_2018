#include "Arduino.h" 
#include <avr/pgmspace.h>
#define byte uint8_t
#include "pins.h"
#ifndef PAYLOADSIZE
#define PAYLOADSIZE 40
#endif

static unsigned char State[4][4];

// tabel voor encryptie
static const PROGMEM unsigned char S_Table[16][16] = {
  {0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76},
  {0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0},
  {0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15},
  {0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75},
  {0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84},
  {0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF},
  {0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8},
  {0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2},
  {0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73},
  {0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB},
  {0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79},
  {0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08},
  {0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A},
  {0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E},
  {0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF},
  {0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16}
};

// tabel voor zendfrequenties KPN en TTN LORA netwerk
static const unsigned char channel[8][3] = {
  {0xD8,0xC6,0x66},  // channel 0
  {0xD8,0xD3,0x33},  // channel 1
  {0xD8,0xE0,0x00},  // channel 2
  {0xD8,0xEC,0xCC},  // channel 3
  {0xD8,0xF9,0x99},  // channel 4
  {0xD9,0x06,0x66},  // channel 5
  {0xD9,0x13,0x33},  // channel 6
  {0xD9,0x20,0x00}   // channel 7
};

struct lmic_t {
    uint8_t         nwkKey[16];       // network session key
    uint8_t         artKey[16];       // application router session key
    uint32_t        devaddr;
    uint32_t        seqnoUp;
    uint8_t         dataLen;          // 0 no data or zero length data, >0 byte count of data
    uint8_t         frame[64];
    uint8_t         pendTxLen;    
<<<<<<< HEAD
    uint8_t         pendTxData[40];   // Let op, bij grotere payload ook deze array vergroten
    uint8_t         LORARegModemConfig1;  
=======
    uint8_t         pendTxData[PAYLOADSIZE];   // Let op, bij grotere payload ook deze array vergroten
>>>>>>> origin/master
    uint8_t         LORARegModemConfig2;  
    uint8_t         LORARegModemConfig3;  
};

static uint8_t mydata[40] = "Hello";
void writeReg (uint8_t addr, uint8_t data );
void spi_start();
void LMIC_setSession (uint32_t devaddr, uint8_t* nwkKey, uint8_t* artKey);
void LMIC_LORARegModemConfig (uint8_t LORARegModemConfig1, uint8_t LORARegModemConfig2, uint8_t LORARegModemConfig3);
void os_wlsbf4 (uint8_t* buf, uint32_t value);
void os_wmsbf4 (uint8_t* buf, uint32_t value);
void os_wlsbf2 (uint8_t* buf, uint16_t value);
uint32_t os_rmsbf4 (uint8_t* buf);
static void os_aes_ctr (uint8_t* buf, uint16_t len);
static void AES_Add_Round_Key(unsigned char *Round_Key);
static unsigned char AES_Sub_Byte(unsigned char Byte);
static void AES_Shift_Rows();
static void AES_Mix_Collums();
static void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key);
static void aes_appendMic (uint8_t* key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t* pdu, int len);
static void micB0 (uint32_t devaddr, uint32_t seqno, int dndir, int len);
void radio_init();
void setopmode (uint8_t mode);
void hal_pin_nss (uint8_t val);
static void rxlora ();
static void configLoraModem (); 
void txlora ();
int LMIC_setTxData2 (uint8_t* data, uint8_t dlen);
static void configChannel ();
static void writeBuf (uint8_t addr, uint8_t* buf, uint8_t len);
static void buildDataFrame (void);
static void aes_cipher (uint8_t* key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t* payload, int len);
void os_wmsbf4 (uint8_t* buf, uint32_t v);
uint32_t os_aes (uint8_t mode, uint8_t* buf, uint16_t len);
static void os_aes_cmac(uint8_t* buf, uint16_t len, uint8_t prepend_aux);
void lmic_aes_encrypt(unsigned char *Data, unsigned char *Key);
static void shift_left(uint8_t* buf, uint8_t len);
